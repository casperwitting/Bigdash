input {
  beats {
    port => "5044"
    codec => multiline {
          pattern => "^%{SYSLOG5424SD}"
          negate => "true"
          what => "previous"
      }
      type => "php-error"
  }
}

filter {
  mutate {
    gsub         => [
      "message", "/Applications/MAMP", "",
      "message", "/Applications/MAMP", "",
      "path",    "/Applications/MAMP", ""
    ]
  }

  grok {
    match => [ "message", "htdocs/(?<project_name>[^/]+)" ]
  }
  if !("" in [project_name]) {
    grok {
        match => [ "message", "home/(?<project_name>[^/]+)" ]
     }
  }

  #TODO Combine project names accordingly

  grok {
    match => [ "message", "(?<error_class>syntax error)" ]
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>not found)" ]
        #TODO Provide extra information for each error class
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Illegal string offset)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>does not exist)" ]
     }
  }if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>No such file or directory)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>No such file in directory)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Uncaught ReflectionException)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>invalid argument)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Undefined variable)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Call to undefined function)" ]
     }
  }if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Call to undefined method)" ]
     }
  }if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Uncaught error)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>the name is already in use)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>)Cannot redeclare" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Uncaught TypeError)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Failed opening required)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Access denied for user)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>foreign key constraint)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Integrity constraint violation)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>not defined)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Base table or view not found)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>No hint path defined)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Trying to get property of non-object)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Unable to read image from file)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Undefined offset)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>TokenMismatchException)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Unexpected data found)" ]
     }
  }
  if !("" in [error_class]) {
    grok {
        match => [ "message", "(?<error_class>Failed to authenticate on SMTP server)" ]
     }
  }

  grok {
    match => [ "message", "\[%{MONTHDAY:day}-%{MONTH:month}-%{YEAR:year} %{TIME:time} %{WORD:zone}(?:/%{WORD:country})?] PHP %{DATA:level}\: %{GREEDYDATA:error} " ]
    add_field    => { "timestamp" => "%{day}-%{month}-%{year} %{time}" }
    add_field    => { "environment" => "local" }
    #remove_field => [ "day", "month", "year", "time", "zone", "country" ]
  }

  mutate {
    uppercase => [ "level" ]
    lowercase => [ "tags" ]
    gsub      => [
      "tags",  " ", "_",
      "level", " ", "_"
    ]
  }

   if "_grokparsefailure" in [tags] {
        grok {
            match => [ "message", "\[%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time}] %{JAVACLASS:debug_level}: %{GREEDYDATA:error} " ]
            add_field    => { "timestamp" => "%{day}-%{month}-%{year} %{time}" }
            remove_tag => [ "_grokparsefailure", "beats_input_codec_multiline_applied", "multiline", "message" ]
        }

        mutate {
            update => { "environment" => "production" }
        }
    }

}

output {
    elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "filebeat-%{+YYYY.MM.dd}"
    document_type => "%{[@metadata][type]}"
  }
}


